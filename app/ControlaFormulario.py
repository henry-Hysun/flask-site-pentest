'''
Classe Responsavel por manipular o formulario

Grupo: Henry Soares de Carvalho
       Rafael Lemos Moreno
       Donizete Junior 
       Lucas Gomide Pavão
       Bruno de Andrade Diniz
       Vinicius

'''

class FormControl:
    def __init__(self,arq):
        import os
        self.text = ''
        self.arquivo = ''
        self.tamanhoLista = 0
        self.numeroQuestoes = 0
        self.matrixDados = []
        self.nomeQuestao = ''
        self.valorImagem = 0
        self.nomeGrafico = ''
        self.caminho = ''
        self.arquivo = arq
        self.nomesTrabalhos = ''
        self.nomeGraficos = ''




    def Linha(self,numero):
        import os
        '''
        Função Responsavel por Ler o CSV e guardar numa matrix, (NECESSARIO CHAMAR ESSA FUNÇÃO PARA AS OUTRAS FUNCIONAREM)
        '''
        i = 0
        lista = []
        
        arquivo = open(self.arquivo,'r')
        
        try:
            for linha in arquivo:
                self.text = self.text + linha
                linha = linha.strip()
                linha = linha.split(';')
                self.matrixDados.append(linha)
                if int(numero) == i:
                    lista = linha
                i = i + 1
            
            self.numeroQuestoes = len(linha)
            self.tamanhoLista = int(i)

            arquivo.close()
            return lista
        except:
            return EnvironmentError


    def SeparaRespostasColuna(self,numero):
        '''
        Retorna todos os dados de uma coluna 
        '''
        lista = []
        for i in range(len(self.matrixDados)):
            lista.append(self.matrixDados[i][numero])
        self.nomeQuestao = str(lista[0])
        s = lista[0]
        k = s.replace('\t','')
        self.nomeGraficos = k.replace('"','')

        del(lista[0])
        return lista
    
    def  SalvaGraficos(self,lista,nm,name,user,filename,dicionario=False):
        '''
        Cria, renderiza e salva os graficos
        '''
        import matplotlib.pyplot as pl
        from collections import Counter
        teste = ''
        if dicionario == False:
            contador = Counter(lista)
        elif dicionario == True:
            contador = lista

        dadosnome = []
        dadosvalor = []

        

        for chave, valor in contador.items():
            dadosnome.append(chave)
            dadosvalor.append(valor)
        print(dadosnome)
        self.nomeGrafico = str(self.valorImagem)+".png"
        #dirImagem = str(self.caminho) + "/" + self.nomeGrafico
        try:
            pl.pie(dadosvalor, labels=dadosnome, autopct='%1.1f%%',wedgeprops={'edgecolor':'black'},shadow=True)
            pl.title(self.nomeGraficos)
            

            dirI = f"{self.caminho}"+str(nm)+".png"
            print(dirI)
            pl.savefig(dirI,bbox_inches='tight') 
            self.valorImagem = self.valorImagem + 1
            #print('Imagem Salva! Nome: '+self.nomeGrafico)
            pl.close('all')
        except:
            print('erro ao salvar!')

    def Cria_Diretorio_Imagens(self,path):
        '''
        Cria diretorio para salvar as imagens, necessario criar o diretorio antes de salvar
        '''
        import os
        try:
            print(path)
            #os.mkdir(path)

            self.caminho = path
            print("Diretorio Criado! ", path)
        except FileExistsError as e:
            print('Houve um erro na hora de criar o diretorio, ', e)
            self.caminho = path
            print('Ja existe um diretorio e sera salvo nele, DIRETORIO: ',self.caminho)
                
    
    def Organiza_Trabalhos(self,lista,trabalho,agrupar=[],nomes=[],juntar=0):
        '''
        Corrige coluna trabalhos
        '''
        self.nomes = []
        self.valores = []
        for i in range(len(lista)):
            conversao = str(lista[i])
            conversao.title
            lista[i] = conversao


        if len(agrupar) >= 1:
            for i in range(len(agrupar)):
                for k in range(len(lista)):
                    if str(lista[k]).startswith(agrupar[i]):
                        lista[k] = str(nomes[i])
        else:
            for i in range(len(lista)):
                if lista[i] == trabalho:
                    lista[i] = trabalho

        from collections import Counter
        contador = Counter(lista)

        nomesLabels = []
        valoresLabels = []
        for chave,valor in contador.items():
            nomesLabels.append(chave)
            valoresLabels.append(valor)

        novosValores = []
        indexesAntigos =[]
        valoresOrganizados = sorted(valoresLabels,reverse=True)
        novosValores.append(valoresOrganizados[0])
        novosValores.append(valoresOrganizados[1])
        novosValores.append(valoresOrganizados[2])
        k = 0
        for i in range(len(valoresLabels)):
            if valoresLabels[i] == novosValores[k]:
                indexesAntigos.append(i)
                k = k + 1
                if k == 3:
                    break

        
        dic = {nomesLabels[int(indexesAntigos[0])] : novosValores[0],
                nomesLabels[int(indexesAntigos[1])] : novosValores[1],
                nomesLabels[int(indexesAntigos[2])] : novosValores[2]}
        j = 0
        for i in range(3):       
            self.nomes.append(nomesLabels[int(indexesAntigos[i])])
            self.valores.append(novosValores[i])

        return dic
            
    def RemoveValoresInvalidos(self,lista,alvo,trocarPor):
        '''
        Remove os valores invalidos de uma lista
        '''

        novaLista = []

        for i in lista:
            if i == '':
                del(i)
        
        for i in range(len(lista)):
            if str(lista[i]) != alvo:
                novaLista.append(lista[i])

            else:
                novaLista.append(trocarPor)

        return novaLista

    def BuscaElemento(self,lista,elemento,respostas=False):
        '''
        Retorna os dados, de uma pesquisa
        '''
        resultados = []
        if respostas == False:
            for i in range(len(lista)):
                if lista[i]  == elemento:
                    resultados.append(i)
                    resultados.append(lista[i])
        else:
            for i in range(len(lista)):
                if lista[i]  == elemento:
                    resultados.append(i)
                    resultados.append(lista[i])
            
            return self.matrixDados[int(resultados[0])+1]


        if len(resultados) > 0:
            resultados.append('Nenhum Valor encontrado!')
        return resultados

    def AgrupaElementos(self,lista):
        '''
        Agrupa os elementos numa lista e retorna um dicionario
        '''
        from collections import Counter
        s = ''
        for i in range(len(lista)):
            s = str(lista[i]) + ','+ s

        s = s.split(',')
        t = []
        for i in s:
            t.append(i.strip())

        t = Counter(t)
        del t['']

       
        return t

    def faixaEtaria(self, lista):
        '''
        Retorna as faixas de idades
        '''
        #faixaetária = 18 a 25, 25 a 30, 30+
        from datetime import datetime
        now = datetime.now()
        ano = now.year
        
        datasFormatadas = []
        for i in range(len(lista)):
            if len(str(lista[i])) > 6:
                datasFormatadas.append(lista[i])
        #print(datasFormatadas)
        datasAnos = []
        idade = []
        for i in range(len(datasFormatadas)):
            s = datasFormatadas[i]
            k = s.split('/')
            datasAnos.append(k[2])
        for anoNascimento in datasAnos:
            idade.append(ano - int(anoNascimento))
        listaFaixaEtaria = []
        for valor in idade:
            if (valor >= 18) and (valor <= 25):
                listaFaixaEtaria.append('Entre 18 e 25 anos')
            elif (valor > 25) and (valor <=30):
                listaFaixaEtaria.append('Entre 26 e 30 anos')
            else:
                listaFaixaEtaria.append('30+')
        
        return listaFaixaEtaria

    def graf11(self, lista, nome): #11, 37 e 39
        indice = self.SeparaRespostasColuna(lista)
        formatado = self.RemoveValoresInvalidos(indice, '', nome)
        return formatado  

pass


