from flask import Flask, render_template, session,request,redirect,url_for,jsonify
from flask_sqlalchemy import SQLAlchemy
#from ControlaFormulario import FormControl

import os





app = Flask(__name__)
app.secret_key = "FATEC2020"
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.sqlite3'
db = SQLAlchemy(app)


app.config["UPLOADS"] = "Files"


class User(db.Model):
    id = db.Column(db.Integer,primary_key=True,unique=True)
    username = db.Column(db.String(50),unique=True)
    name = db.Column(db.String(50))
    email = db.Column(db.String(80),unique=True)
    senha = db.Column(db.String(20))
    #user_files = db.relationship("Files",backref="userfiles")

    def __init__(self,name,username,email,senha):
        self.name = name
        self.username = username
        self.email = email
        self.senha = senha

class Files(db.Model):
    id = db.Column(db.Integer,primary_key=True)
    username = db.Column(db.String(50))
    name = db.Column(db.String(50))
    num = db.Column(db.Integer)
    #data = db.Column(db.LargeBinary)
"""

class Images(db.Model):
    id = db.Column(db.Integer,primary_key=True)
    owner = db.Column(db.String(50))
    name = db.Column(db.String(50))
    data = db.Column(db.LargeBinary)
"""
@app.route("/")
@app.route("/home",methods=["GET","POST"])
def main():

    if "user" in session:

        if request.method == "POST":
            try:
                if request.files:
                    file = request.files["file"]

                    
                    
                    try:
                        os.mkdir("Files/"+session["user"])
                    except:
                        print('ta')
                    
                    name = str(session["user"]) + "/" + str(file.filename)
                    file.save(os.path.join(app.config["UPLOADS"],name))
                    
                    nm = session["user"]
                    session["currentFile"] = file.filename
                    session["path"] = f"Files\\{nm}\\"+file.filename
                    arq = open(f"Files\\{nm}\\"+file.filename)
                    text = ''
                    for linha in arq:
                        text = text + linha
                        linha = linha.strip()
                        linha = linha.split(';')
                        """
                    from ControlaFormulario import FormControl
                    form = FormControl(f"Files/{nm}/"+file.filename)
                    form.Linha(0)
                    
                    print(form.SeparaRespostasColuna(1))
                    """
                    arq.close()
                    username = session["user"]
                    """
                    newFile = Files(name=file.filename,username=username)
                    db.session.add(newFile)
                    db.session.commit()
                    """
                    
                    return render_template("upload.html",arquivo=file.filename,text=text,user=session["user"])
            except EnvironmentError as e:
                return "erro ao salvar!" + e

        try:
            search = "%{}%".format(session["user"])
            dados = Files.query.filter(Files.username.like(search)).all()
            data = []
            for i in dados:
                st = str(i.name)
                data.append(st.replace(".csv",""))
            print(data)
            return render_template("home.html",user=session["user"],dados=data)
        except:
            return render_template("home.html",user=session["user"])
    else:
        return render_template("loginForm.html",img="fatec.png")


@app.route("/logout")
def logout():
    session.pop("user",None)
    return redirect("home")

@app.route("/registrar")
def registrar():
    if "user" in session:
        return redirect(url_for("main"))
    else:
        return render_template("registerForm.html")

@app.route("/register",methods=["POST"])
def register():
    if request.method == 'POST':
        req = request.json
        try:
            name = req["name"]
            username = req["username"]
            email = req["email"]
            senha = req["senha"]

            print(name,username,email,senha)

            newUser = User(name=name,username=username,email=email,senha=senha)
            db.session.add(newUser)
            db.session.commit()   

            return jsonify({"message":"criado"})
        except:
            return jsonify({"message":"Erro ao criar o usuario"})
    else:
        return jsonify({"message":"Não pode usar esse metodo aqui!"})


@app.route("/login",methods=["POST"])
def login():
    req = request.get_json()

    if request.method == "POST":
        try:
            username = req["username"]
            senha = req["senha"]
            dados = User.query.all()
            usernames = []
            senhas = []

            for i in range(len(dados)):
                usernames.append(dados[i].username)
                senhas.append(dados[i].senha)
            

            if username in usernames and senha in senhas:
                
                session["user"] = username
                
                return jsonify({"message":"loggin"})

            else:
                return jsonify({"message":"Recusado!"}),404
        except:
            return jsonify({"message":"Parametros Errados!"})

@app.route("/upload",methods=["POST","GET"])
def upload():
    if "user" in session:
        if request.method == "POST":
            try:
                if request.files:
                    file = request.files["file"]
                    
                    try:
                        os.mkdir("Files/"+session["user"])
                    except:
                        print('ta')
                    
                    name = str(session["user"]) + "/" + str(file.filename)
                    file.save(os.path.join(app.config["UPLOADS"],name))
                    
                    nm = session["user"]
                    session["currentFile"] = file.filename
                    session["path"] = f"Files\\{nm}\\"+file.filename
                    arq = open(f"Files\\{nm}\\"+file.filename)
                    text = ''
                    for linha in arq:
                        text = text + linha
                        linha = linha.strip()
                        linha = linha.split(';')
                       
                    from ControlaFormulario import FormControl
                    form = FormControl(f"Files/{nm}/{file.filename}")
                    form.Linha(0)
                    f = str(file.filename)
                    ttt = f.replace(".csv","")
                    print(f"static/{nm}/{ttt}")
                    t = f"static/{nm}/{ttt}/"
                    try:
                        os.mkdir(f"static/{nm}")
                    except:
                        print('ja existe')
                    os.mkdir(f"static/{nm}/{ttt}")
                    form.Cria_Diretorio_Imagens(t)
                    for i in range(len(form.matrixDados)):
                        gf = form.SeparaRespostasColuna(i)
                        form.SalvaGraficos(gf,i,"teste",nm,"teste")
                   

                    username = session["user"]
                    newFile = Files(name=file.filename,username=username,num=len(form.matrixDados))
                    db.session.add(newFile)
                    db.session.commit()
                    
                    d = file.filename
                    k = d.replace(".csv","")
                    return redirect(f"/getimages/{username}/{k}")
            except EnvironmentError as e:
                return "erro ao salvar!" + e
    else:
        return redirect("home")
"""
@app.route("/savefile",methods=["POST"])
def saveimages():
    req = request.get_json()

    if "user" in session:
        try:
            dado = req["content"]

            print(session["opc"])
            user = session["user"]
            arq = session["currentFile"]
            
            fil = open("teste.csv",'w+')
            fil.write(str(dado))
            fil.close()


            return jsonify({"message":"Arquivo Salvo!"})
        except:
            return jsonify({"message":"Algo deu errado!"}),400
    else:
        return jsonify({"message":"Você precisa fazer o login para continuar!"})

@app.route("/saveimages",methods=["POST","GET"])
def saveImages():

    if "user" in session:
        try:
            user = session["user"]
            fil = session["currentFile"]
            
            from ControlaFormulario import FormControl
            
            path = session["path"]
            print(path)

            #arquivo = open(path,'r')
            print("entrou")
            form = FormControl('teste.csv')
            form.Linha(0) 
            print(form.SeparaRespostasColuna(1))
           
            filee = open(f'Files/{user}/'+fil)
            teste = f'Files/{user}/'+fil
          

            
            newFile = Files(name=fil,username=user)
            db.session.add(newFile)
            db.session.commit()

            return jsonify({"message":"imagens salvas!"})
        except:
            print(EnvironmentError)
            return jsonify({"message":"Erro ao salvar!"})
    else:
        return redirect("home")
"""
@app.route("/standart/form")
def showImage():
    dados = []
    for i in range(87):
        if (i != 0 ) and (i != 3) and (i != 77) and (i != 89):
            dados.append("/standart/"+str(i)+".png")
    print(dados)
    return render_template("standart.html",dados=dados,user=session["user"])

@app.route("/getimages/<user>/<file>")
def getimages(user,file):
    username = session["user"]
    dados  =[]
    search = "%{}%".format(f"{user}")

    dados = Files.query.filter(Files.username.like(search)).all()  
    nomesA = []
    for i in dados:
        retificador = i.name.replace(".csv","")
        nomesA.append(retificador)
    #print(dados[0].num)
    
    print("nome arquivo = ",file)
    if file in nomesA:
        k = 0
        for i in range(len(nomesA)):
            if str(nomesA[i]) == file:
                k = i
        tamanho = dados[k].num
        fk = []
        for i in range(tamanho):
            fk.append(f"/{user}/{file}/"+str(i)+".png")

        return render_template("showimages.html",dados=fk,usern=user,user=username,name=file)
    else:
        return render_template("showimages.html")

@app.route("/pesquisar/<formulario>")
def pesquisar(formulario):
    try:
        search = "%{}%".format(f"{formulario}")

        dados = Files.query.filter(Files.name.like(search)).all()  

        dataFiles = []
        dataNames = []
        
        for i in dados:
            nomeA = i.name
            t = nomeA.replace(".csv","")

            dataFiles.append(t)  
            dataNames.append(i.username) 
            tamanho = len(dataFiles)
        return render_template("pesquisa.html",dados=dataFiles,nomes=dataNames,tam=tamanho,user=session["user"])
    except:
        return render_template("pesquisa.html")
"""
@app.route('/users/<user>')
def getusers(user):
"""
    
if __name__ == "__main__":
    db.create_all()
    app.run(debug=False,host='0.0.0.0')

